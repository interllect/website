<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');function rename_and_create_thumbnail($image_data, $resize_dimensions) {    $ci =& get_instance();	// rename file	$file = $image_data['full_path'];	$new_name = unique_id() . $image_data['file_ext'];	$new_path = $image_data['file_path'] . $new_name;	$create_new_file = rename($image_data['full_path'], $new_path);					// create thumbnail	$config['image_library'] = 'gd2';	$config['source_image'] = $new_path;	$config['create_thumb'] = TRUE;	$config['maintain_ratio'] = TRUE;	$config['width'] = $resize_dimensions['width'];	$config['height'] = $resize_dimensions['height'];	$ci->load->library('image_lib', $config);	$ci->image_lib->resize();	return $new_name;}function upload_job_file($file_data) {    $ci =& get_instance();	// rename file	$file = $file_data['full_path'];	$new_name = unique_id() . $file_data['file_ext'];	$new_path = $file_data['file_path'] . $new_name;	$create_new_file = rename($file_data['full_path'], $new_path);	return $new_name;}function rename_and_resize($image_data, $resize_dimensions) {    $ci =& get_instance();	// rename file	$file = $image_data['full_path'];	$new_name = unique_id() . $image_data['file_ext'];	$new_path = $image_data['file_path'] . $new_name;	$create_new_file = rename($image_data['full_path'], $new_path);					// create thumbnail	$config['image_library'] = 'gd2';	$config['source_image'] = $new_path;	$config['create_thumb'] = FALSE;	$config['maintain_ratio'] = TRUE;	$config['width'] = $resize_dimensions['width'];	$config['height'] = $resize_dimensions['height'];	$ci->load->library('image_lib', $config);	$ci->image_lib->resize();	return $new_name;}function resize_and_crop($image_data, $resize_dimensions) {    $ci =& get_instance();	// rename file	$file = $image_data['full_path'];	$new_name = 'large' . $image_data['file_ext'];	$new_path = $image_data['file_path'] . $new_name;	$create_new_file = rename($image_data['full_path'], $new_path);	$scale = 1;		$image_width = $image_data['image_width'];	$image_height = $image_data['image_height'];		$final_width = $resize_dimensions['width']; // wished output width for landscape perspective	$final_height = $resize_dimensions['height']; // wished output height landscape perspective		// calculate the optimal size before we crop the overlapping part	$x = $final_width/$image_width;	$y = $final_height/$image_height;		// get what is the best side to scale	if($x < $y) {		$new_width = round($image_width *($final_height/$image_height));		$new_height = $final_height;	}	else {		$new_height = round($image_height *($final_width/$image_width));		$new_width = $final_width;	}		$to_crop_left = ($new_width - ($final_width *$scale))/2;  // you have to divide it by 2 because you what to crop from the center	$to_crop_top = ($new_height - ($final_height *$scale))/2;  // you have to divide it by 2 because you what to crop from the center		// first step resize to the calculated size	$config['image_library']         = 'GD2';	$config['source_image']         = $new_path;	$config['maintain_ratio']         = true;	$config['master_dim']             = 'width';	$config['width']                 = $new_width;	$config['height']                 = $new_height;	$config['quality']                 = '100%';		$ci->load->library('image_lib', $config);	$ci->image_lib->resize();		// now crop the image from the center	$config['image_library']         = 'GD2';	$config['source_image']         = $new_path;	$config['width']                 = $final_width;	$config['height']                 = $final_height;	$config['x_axis']                 = $to_crop_left;	$config['y_axis']                 = $to_crop_top;	$config['maintain_ratio']         = false;		$ci->image_lib->initialize($config);	$ci->image_lib->crop();}function rename_resize_and_crop($image_data, $resize_dimensions) {    $ci =& get_instance();	// rename file	$file = $image_data['full_path'];	$new_name = unique_id() . $image_data['file_ext'];	$new_path = $image_data['file_path'] . $new_name;	$create_new_file = rename($image_data['full_path'], $new_path);	$scale = 1;		$image_width = $image_data['image_width'];	$image_height = $image_data['image_height'];		$final_width = $resize_dimensions['width']; // wished output width for landscape perspective	$final_height = $resize_dimensions['height']; // wished output height landscape perspective		// calculate the optimal size before we crop the overlapping part	$x = $final_width/$image_width;	$y = $final_height/$image_height;		// get what is the best side to scale	if($x < $y) {		$new_width = round($image_width *($final_height/$image_height));		$new_height = $final_height;	}	else {		$new_height = round($image_height *($final_width/$image_width));		$new_width = $final_width;	}		$to_crop_left = ($new_width - ($final_width *$scale))/2;  // you have to divide it by 2 because you what to crop from the center	$to_crop_top = ($new_height - ($final_height *$scale))/2;  // you have to divide it by 2 because you what to crop from the center		// first step resize to the calculated size	$config['image_library']         = 'GD2';	$config['source_image']         = $new_path;	$config['maintain_ratio']         = true;	$config['master_dim']             = 'width';	$config['width']                 = $new_width;	$config['height']                 = $new_height;	$config['quality']                 = '100%';		$ci->load->library('image_lib', $config);	$ci->image_lib->resize();		// now crop the image from the center	$config['image_library']         = 'GD2';	$config['source_image']         = $new_path;	$config['width']                 = $final_width;	$config['height']                 = $final_height;	$config['x_axis']                 = $to_crop_left;	$config['y_axis']                 = $to_crop_top;	$config['maintain_ratio']         = false;		$ci->image_lib->initialize($config);	$ci->image_lib->crop();	return $new_name;}function create_show_image($image_data) {    $ci =& get_instance();	// rename file	$file = $image_data['full_path'];	$unique_id = unique_id();		$new_name = $unique_id . $image_data['file_ext'];	$new_path = $image_data['file_path'] . $new_name;	$create_new_file = rename($image_data['full_path'], $new_path);	$scale = 1;		$image_width = $image_data['image_width'];	$image_height = $image_data['image_height'];		$final_width = 330; // wished output width for landscape perspective	$final_height = 330; // wished output height landscape perspective		// calculate the optimal size before we crop the overlapping part	$x = $final_width/$image_width;	$y = $final_height/$image_height;		// get what is the best side to scale	if($x < $y) {		$new_width = round($image_width *($final_height/$image_height));		$new_height = $final_height;	}	else {		$new_height = round($image_height *($final_width/$image_width));		$new_width = $final_width;	}		$to_crop_left = ($new_width - ($final_width *$scale))/2;  // you have to divide it by 2 because you what to crop from the center	$to_crop_top = ($new_height - ($final_height *$scale))/2;  // you have to divide it by 2 because you what to crop from the center		// first step resize to the calculated size	$config['image_library']         = 'GD2';	$config['source_image']         = $new_path;	$config['maintain_ratio']         = true;	$config['master_dim']             = 'width';	$config['width']                 = $new_width;	$config['height']                 = $new_height;	$config['quality']                 = '100%';		$ci->load->library('image_lib', $config);	$ci->image_lib->resize();		// now crop the image from the center	$config['image_library']         = 'GD2';	$config['source_image']         = $new_path;	$config['width']                 = $final_width;	$config['height']                 = $final_height;	$config['x_axis']                 = $to_crop_left;	$config['y_axis']                 = $to_crop_top;	$config['maintain_ratio']         = false;		$ci->image_lib->initialize($config);	$ci->image_lib->crop();	// Copy the resized 330x330 image with _thumb appended	$new_thumb_name = $unique_id . "_thumb" . $image_data['file_ext'];	$new_thumb_path = $image_data['file_path'] . $new_thumb_name;	$thumbnail = copy($new_path, $new_thumb_path);		// Resize thumbnail	$config['image_library']         = 'GD2';	$config['source_image']         = $new_thumb_path;	$config['maintain_ratio']         = FALSE;	$config['master_dim']             = 'width';	$config['width']                 = 80;	$config['height']                 = 80;	$config['quality']                 = '100%';		$ci->image_lib->initialize($config);	$ci->image_lib->resize();	return $new_name;}function thumbnail_url($image_url) {	$url_segments = explode(".", $image_url);		return $url_segments[0] . "_thumb." . $url_segments[1];}function image_dir_path($image_url) {	$dir =  substr($image_url, 1, strlen($image_url));	return $dir;}function unique_id(){	$better_token = md5(uniqid(rand(), true));	$unique_code = substr($better_token, 16);	$uniqueid = $unique_code;	return $uniqueid;}/* End of file image_upload_helper.php *//* Location: ./system/application/helpers/image_upload_helper.php */